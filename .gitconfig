[core]
	autocrlf = false
	ignorecase = true
	pager = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight | less
[user]
	name = Patrick Cloke
	email = clokep@patrick.cloke.us
[color]
	ui = auto
[merge]
	tool = kdiff3
[mergetool "kdiff3"]
	path = C:/Program Files/TortoiseHg/kdiff3.exe
[diff]
	guitool = kdiff3
	compactionHeuristic = true
[difftool "kdiff3"]
	path = C:/Program Files/TortoiseHg/kdiff3.exe
[alias]
# Log of changes on origin not yet on branch (aka hg incoming).
	incoming = log HEAD..@{upstream}
# Log of changes on branch not yet on branch (aka hg outgoing).
	outgoing = log @{upstream}..HEAD
	graph = log --pretty=oneline --abbrev-commit --decorate --graph
	diffstat = diff --stat
	staged = diff --cached
	unstaged = diff
	uadd = add --update
# Commit even if pre-commit hooks fail.
	reallycommit = commit --no-verify
# Amend with the same commit message.
	fixup = commit --amend -C HEAD
	reallyfixup = commit --no-verify --amend -C HEAD
# Push even if pre-push hooks fail.
	reallypush = push --no-verify
# Print out aliases
	alias = config --get-regexp alias
# Print like hg rollback
	rollback = reset --soft HEAD^
	committers = shortlog -sne
# Import like hg import
	import = apply --reject
# Show a diff of only (real?) modified files
	modified = diff --diff-filter=MUB --ignore-space-at-eol --ignore-space-change --ignore-all-space
	mstaged = diff --cached --diff-filter=MUB
# cd back to the root of this git repository.
	root = !cd "`git rev-parse --show-cdup`" && pwd
	git = !sh -c 'git $0'
	mylog = log --author='Patrick Cloke'
# Delete unused remote branches and their local copies.
	trim = !sh -c "git remote prune $1 && git branch -r | cut -d ' ' -f 3 | egrep -v -f /dev/fd/0 <(git branch -vv | grep $1) | cut -d ' ' -f 3 | xargs git branch -d"
# Delete branches merged into the current branch
	localprune = "!git branch --merged master | grep -v master | xargs git branch -d"
# Some things I always try to type...
	branches = branch -l
	tags = tag -l
# Squash all commits down to a single commit.
    squash = "!f(){ CUR=`git rev-parse HEAD` && git reset --soft ${1} && git commit -m \"$(git log --format=%B ${1}..${CUR})\"; };f && git commit --amend"
# Find the oldest ancestor of the current branch shared with master.
# See http://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git
	oldest-ancestor = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -
	branchdiff = !sh -c \"git diff `git oldest-ancestor`..HEAD $@\"
	branchlog = !sh -c \"git log `git oldest-ancestor`..HEAD $@\"
	branchbase = !sh -c \"git rebase -i `git oldest-ancestor`\"
# Bisect the current branch using a command.
	branchsect = "!f() { git bisect start HEAD `git oldest-ancestor`; git bisect run \"$@\"; }; f"
[push]
	default = simple
[interactive]
	diffFilter = diff-highlight
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[log]
	mailmap = true
